{"version":3,"sources":["components/SmallModal/Index.js","components/LoginForm/Index.js","components/members/RegistrationForm/Index.js","pages/Login/Index.js","components/NavBar/Index.js","components/Temp/Index.js","pages/Main/Index.js","App.js","serviceWorker.js","index.js"],"names":["SmallModal","isOpen","toggle","content","Fragment","className","onClick","LoginForm","props","useState","username","setUsername","password","setPassword","openModal","setOpenModal","toggleModal","type","autoComplete","placeholder","value","onChange","e","target","trim","user","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","localStorage","setItem","loginHandler","catch","toggleRegForm","RegistrationForm","usersAPI","first_name","setFirstname","last_name","setLastname","confirmpassword","setConfirmPassword","validator","setValidator","usernameExists","setUsernameExists","modalMsg","setModalMsg","regBtnValidationHandler","id","onBlur","document","querySelector","style","visibility","innerHTML","un","member","disabled","LoginPage","isRegFormVisible","setIsRegFormVisible","showForm","Navbar","logoutHandler","ComingSoon","MainPage","isLoggedIn","path","to","App","getItem","setIsLoggedIn","clear","basename","process","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.edaa15d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/style.css';\r\n\r\n\r\nfunction SmallModal({isOpen, toggle, content}) {\r\n\r\n   \r\n   \r\n   \r\n   return (\r\n      <React.Fragment>\r\n         { \r\n            isOpen ?\r\n            <div className=\"smModalWrap\" onClick={toggle} >\r\n               <div className=\"smModalOverlay\" ></div>\r\n               <div className=\"smModalContent\">\r\n                  <p className=\"smModalText\">\r\n                     {content}\r\n                  </p>\r\n               </div>\r\n            </div>\r\n            :\r\n            <div></div>\r\n         }\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\nexport default SmallModal;","import React, { useState } from 'react';\r\nimport SmallModal from '../SmallModal/Index';\r\nimport './css/style.css';\r\n\r\n\r\nfunction LoginForm(props) {\r\n   let usersLoginAPI = \"https://capstone2-090119.herokuapp.com/users/login\";\r\n\r\n   let [username, setUsername] = useState(\"\");\r\n   let [password, setPassword] = useState(\"\");\r\n\r\n   let [openModal, setOpenModal] = useState(false);\r\n   let modalContent = \"unable to login\";\r\n\r\n   let toggleModal = () => {\r\n      setOpenModal(!openModal)\r\n   }\r\n\r\n   let unChangeHandler = (e) => {\r\n      setUsername(e.target.value.trim())\r\n   }\r\n\r\n   let pwChangeHandler = (e) => {\r\n      setPassword(e.target.value.trim())\r\n   }\r\n\r\n   let userLoginHandler = () => {\r\n      let user = {\r\n         username,\r\n         password\r\n      }\r\n      fetch(usersLoginAPI, {\r\n         method: 'post',\r\n         headers: {\r\n            'Content-type': 'application/json'\r\n         },\r\n         body: JSON.stringify(user)\r\n      })\r\n         .then(res => res.json())\r\n         .then(data => {\r\n            // localStorage.setItem(\"userRole\", data.username);\r\n            console.log(data);\r\n            localStorage.setItem(\"currentUser\", data);\r\n            props.loginHandler(true);\r\n         })\r\n         .catch(e => {\r\n            toggleModal();\r\n            console.log(e)\r\n         })\r\n   }\r\n\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <div className=\"loginFormWrap jumbotron\">\r\n            <form className=\"loginForm\">\r\n               <div className=\"form-group\">\r\n                  <div className=\"input-group\">\r\n                     <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\"><i className=\"fas fa-user\"></i></div>\r\n                     </div>\r\n                     <input className=\"form-control secondFont\"\r\n                        type=\"text\"\r\n                        autoComplete=\"false\"\r\n                        placeholder=\"username\"\r\n                        value={username}\r\n                        onChange={unChangeHandler} />\r\n                  </div>\r\n               </div>\r\n               <div className=\"form-group\">\r\n                  <div className=\"input-group\">\r\n                     <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\"><i className=\"fas fa-lock\"></i></div>\r\n                     </div>\r\n                     <input className=\"form-control secondFont\"\r\n                        type=\"password\"\r\n                        autoComplete=\"false\"\r\n                        placeholder=\"password\"\r\n                        value={password}\r\n                        onChange={pwChangeHandler} />\r\n                     </div>\r\n               </div>\r\n               <div className=\"form-group pt-3\">\r\n                  <button \r\n                     className=\"loginBtn btn btn-block firstFont\"\r\n                     type=\"button\"\r\n                     onClick={userLoginHandler}\r\n                     >SIGN IN\r\n                  </button>\r\n                  <p className=\"registerText secondFont\">\r\n                     Not yet a member? \r\n                     <span className=\"registerLink ml-2\" onClick={props.toggleRegForm}>\r\n                        Sign up here!\r\n                     </span>\r\n                  </p>\r\n               </div>\r\n            </form>\r\n            <SmallModal isOpen={openModal} toggle={toggleModal} content={modalContent} />\r\n         </div>\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\nexport default LoginForm;","import React, { useState } from 'react';\r\nimport SmallModal from '../../SmallModal/Index';\r\nimport './css/style.css';\r\n\r\nfunction RegistrationForm(props) {\r\n   let usersAPI = \"https://capstone2-090119.herokuapp.com/users/\";\r\n\r\n\r\n   let [first_name, setFirstname] = useState(\"\");\r\n   let [last_name, setLastname] = useState(\"\");\r\n   let [username, setUsername] = useState(\"\");\r\n   let [password, setPassword] = useState(\"\");\r\n   let [confirmpassword, setConfirmPassword] = useState(\"\");\r\n\r\n   let [validator, setValidator] = useState(true);\r\n   let [usernameExists, setUsernameExists] = useState();\r\n\r\n   let [modalMsg, setModalMsg] = useState(\"success!\")\r\n\r\n\r\n   let fnValidationHandler = (e) => {\r\n      if (first_name === \"\") {\r\n         setValidator(true);\r\n         document.querySelector(\"#regFirstname\").style.visibility = \"visible\";\r\n      } else {\r\n         document.querySelector(\"#regFirstname\").style.visibility = \"hidden\";\r\n      }\r\n   }\r\n\r\n   let lnValidationHandler = (e) => {\r\n      if (last_name === \"\") {\r\n         setValidator(true);\r\n         document.querySelector(\"#regLastname\").style.visibility = \"visible\";\r\n      } else {\r\n         document.querySelector(\"#regLastname\").style.visibility = \"hidden\";\r\n      }\r\n   }\r\n\r\n   let unValidationHandler = (e) => {\r\n      if (username === \"\") {\r\n         console.log(username)\r\n         console.log(e.target)\r\n         setValidator(true);\r\n         document.querySelector(\"#regUsername\").style.visibility = \"visible\";\r\n         document.querySelector(\"#regUsername\").innerHTML = \"*This field is required\";\r\n      } else if (usernameExists) {\r\n         document.querySelector(\"#regUsername\").innerHTML = \"*Username already exists\";\r\n         document.querySelector(\"#regUsername\").style.visibility = \"visible\";\r\n      } else {\r\n         document.querySelector(\"#regUsername\").style.visibility = \"hidden\";\r\n         regBtnValidationHandler();\r\n      }\r\n   }\r\n\r\n   let pwValidationHandler = () => {\r\n      if (password === \"\") {\r\n         setValidator(true);\r\n         document.querySelector(\"#regPassword\").style.visibility = \"visible\";\r\n         document.querySelector(\"#regPassword\").innerHTML =\r\n            \"*This field is required\";\r\n      }\r\n      if (password !== \"\" && confirmpassword !== \"\") {\r\n         if (password !== confirmpassword) {\r\n            setValidator(true);\r\n            document.querySelector(\"#regConfirmPW\").style.visibility = \"visible\";\r\n            document.querySelector(\"#regConfirmPW\").innerHTML =\r\n               \"***Passwords do not match\";\r\n            document.querySelector(\"#regPassword\").style.visibility = \"visible\";\r\n            document.querySelector(\"#regPassword\").innerHTML =\r\n               \"***Passwords do not match\";\r\n         } else {\r\n            document.querySelector(\"#regConfirmPW\").style.visibility = \"hidden\";\r\n            document.querySelector(\"#regPassword\").style.visibility = \"hidden\";\r\n         }\r\n      }\r\n   };\r\n\r\n   let cpwValidationHandler = () => {\r\n      if (confirmpassword === \"\") {\r\n         setValidator(true);\r\n         document.querySelector(\"#regConfirmPW\").style.visibility = \"visible\";\r\n         document.querySelector(\"#regConfirmPW\").innerHTML =\r\n            \"*This field is required\";\r\n      }\r\n      if (confirmpassword !== \"\") {\r\n         if (password !== confirmpassword) {\r\n            setValidator(true);\r\n            document.querySelector(\"#regConfirmPW\").style.visibility = \"visible\";\r\n            document.querySelector(\"#regConfirmPW\").innerHTML =\r\n               \"***Passwords do not match\";\r\n            document.querySelector(\"#regPassword\").style.visibility = \"visible\";\r\n            document.querySelector(\"#regPassword\").innerHTML =\r\n               \"***Passwords do not match\";\r\n         } else {\r\n            document.querySelector(\"#regConfirmPW\").style.visibility = \"hidden\";\r\n            document.querySelector(\"#regPassword\").style.visibility = \"hidden\";\r\n         }\r\n      }\r\n   };\r\n\r\n\r\n   let regBtnValidationHandler = () => {\r\n      if (first_name !== \"\" &&\r\n         last_name !== \"\" &&\r\n         username !== \"\" &&\r\n         password !== \"\" &&\r\n         confirmpassword !== \"\" &&\r\n         usernameExists !== true) {\r\n         setValidator(false);\r\n      } else setValidator(true);\r\n   }\r\n\r\n\r\n   let firstnameChangeHandler = (e) => {\r\n      if (e.target.value.trim() !== \"\") {\r\n         setFirstname(e.target.value);\r\n         regBtnValidationHandler();\r\n      } else setFirstname(\"\")\r\n   }\r\n\r\n   let lastnameChangeHandler = (e) => {\r\n      if (e.target.value.trim() !== \"\") {\r\n         setLastname(e.target.value);\r\n         regBtnValidationHandler();\r\n      } else setLastname(\"\")\r\n   }\r\n\r\n   let checkIfUsernameExists = (un) => {\r\n      fetch( usersAPI + \"username/\" + un)\r\n         .then(res => res.json())\r\n         .then(data => {\r\n            setUsernameExists(data);\r\n            if (data) {\r\n               document.querySelector(\"#regUsername\").innerHTML =\r\n                  \"*Username already exists\";\r\n               document.querySelector(\"#regUsername\").style.visibility = \"visible\";\r\n               setValidator(data);\r\n            }\r\n            else {\r\n               document.querySelector(\"#regUsername\").style.visibility = \"hidden\";\r\n               document.querySelector(\"#regUsername\").innerHTML =\r\n                  \"*This field is required\";\r\n            }\r\n         })\r\n         .catch(e => {\r\n            console.log(e)\r\n         })\r\n   }\r\n\r\n   let usernameChangeHandler = (e) => {\r\n      if (e.target.value.trim() !== \"\") {\r\n         setUsername(e.target.value);\r\n         checkIfUsernameExists(e.target.value.trim())\r\n         regBtnValidationHandler();\r\n      } else {\r\n         setUsername(\"\")\r\n      }\r\n   }\r\n\r\n\r\n\r\n   let passwordChangeHandler = (e) => {\r\n      if (e.target.value.trim() !== \"\") {\r\n         setPassword(e.target.value);\r\n         regBtnValidationHandler();\r\n      } else setPassword(\"\")\r\n   }\r\n\r\n   let confirmPasswordChangeHandler = (e) => {\r\n      if (e.target.value.trim() !== \"\") {\r\n         setConfirmPassword(e.target.value);\r\n         regBtnValidationHandler();\r\n      } else setConfirmPassword(\"\")\r\n   }\r\n\r\n\r\n\r\n   let registerBtnClickHandler = (e) => {\r\n      let member = {\r\n         username,\r\n         password,\r\n         first_name,\r\n         last_name\r\n      }\r\n      fetch(usersAPI+\"register/member\", {\r\n         method: 'post',\r\n         headers: {\r\n            'Content-type': 'application/json',\r\n         },\r\n         body: JSON.stringify(member)\r\n      })\r\n         .then(res => res.json())\r\n         .then(data => {\r\n            setModalMsg(\"success!\");\r\n            toggleModal()\r\n            \r\n         })\r\n         .catch(e => {\r\n            console.log(e);\r\n            setModalMsg(\"sign up failed\");\r\n            toggleModal();\r\n         })\r\n\r\n      setUsername(\"\")\r\n      setPassword(\"\")\r\n      setConfirmPassword(\"\")\r\n      setFirstname(\"\")\r\n      setLastname(\"\")\r\n   }\r\n\r\n   let [openModal, setOpenModal] = useState(false);\r\n\r\n   let toggleModal = () => {\r\n      if (openModal) {\r\n         setOpenModal(!openModal);\r\n         props.toggleRegForm();\r\n      } else {\r\n         setOpenModal(!openModal);\r\n      }\r\n   }\r\n\r\n\r\n   \r\n   return (\r\n      <React.Fragment>\r\n      <div className=\"regFormWrap py-4 secondFont\">\r\n         <form className=\"regForm\">\r\n            <div className=\"form-group\">\r\n               <p className=\"regFormLabel\">\r\n                  Member Registration\r\n               </p>\r\n            </div>\r\n            <div className=\"form-group\">\r\n               <input \r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  id=\"username\"\r\n                  autoComplete=\"off\"\r\n                  onBlur={unValidationHandler}\r\n                  onChange={usernameChangeHandler}\r\n                  value={username}\r\n                  placeholder=\"Pick a unique username...\"\r\n               />\r\n               <p id=\"regUsername\" className=\"blankInputAlert\">\r\n                  *This field is required\r\n               </p>\r\n               <input \r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  id=\"firstname\"\r\n                  autoComplete=\"off\"\r\n                  onBlur={fnValidationHandler}\r\n                  onChange={firstnameChangeHandler}\r\n                  value={first_name}\r\n                  placeholder=\"First Name...\"\r\n               />\r\n               <p id=\"regFirstname\" className=\"blankInputAlert\">\r\n                  *This field is required\r\n               </p>\r\n               <input \r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  id=\"lastname\"\r\n                  autoComplete=\"off\"\r\n                  onBlur={lnValidationHandler}\r\n                  onChange={lastnameChangeHandler}\r\n                  value={last_name}\r\n                  placeholder=\"Last Name...\"\r\n               />\r\n               <p id=\"regLastname\" className=\"blankInputAlert\">\r\n                  *This field is required\r\n               </p>\r\n               <input \r\n                  className=\"form-control\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"off\"\r\n                  onBlur={pwValidationHandler}\r\n                  onChange={passwordChangeHandler}\r\n                  value={password}\r\n                  placeholder=\"Choose a password...\"\r\n               />\r\n               <p id=\"regPassword\" className=\"blankInputAlert\">\r\n                  *This field is required\r\n               </p>\r\n               <input \r\n                  className=\"form-control\"\r\n                  type=\"password\"\r\n                  id=\"confirmpassword\"\r\n                  autoComplete=\"off\"\r\n                  onBlur={cpwValidationHandler}\r\n                  onChange={confirmPasswordChangeHandler}\r\n                  value={confirmpassword}\r\n                  placeholder=\"Confirm chosen password...\"\r\n               />\r\n               <p id=\"regConfirmPW\" className=\"blankInputAlert\">\r\n                  ***Passwords do not match\r\n               </p>\r\n            </div>\r\n            <div className=\"form-group\">\r\n               <button \r\n                  className=\"btn btn-block form-control firstFont\"\r\n                  id=\"regBtn\"\r\n                  onClick={registerBtnClickHandler}\r\n                  disabled={validator}\r\n                  type=\"button\"\r\n                  >CREATE ACCOUNT\r\n               </button>\r\n               <p className=\"registerText\">\r\n                  Already a member? \r\n                  <span className=\"registerLink ml-2\" onClick={props.toggleRegForm}>\r\n                     Sign in here!\r\n                  </span>\r\n               </p>\r\n            </div>\r\n         </form>\r\n         <SmallModal isOpen={openModal} toggle={toggleModal} content={modalMsg} />\r\n      </div>\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\n\r\nexport default RegistrationForm;","import React, { useState } from 'react';\r\nimport LoginForm from '../../components/LoginForm/Index';\r\nimport RegisterMemberForm from '../../components/members/RegistrationForm/Index';\r\nimport './css/style.css';\r\n\r\n\r\nfunction LoginPage(props) {\r\n\r\n   let [isRegFormVisible, setIsRegFormVisible] = useState(false);\r\n\r\n   let toggleRegForm = () => {\r\n      setIsRegFormVisible(!isRegFormVisible)\r\n   }\r\n\r\n   let showForm = (props) => (\r\n      !isRegFormVisible ?\r\n         <LoginForm {...props} loginHandler={props.loginHandler}  toggleRegForm={toggleRegForm} /> \r\n      : \r\n         <RegisterMemberForm toggleRegForm={toggleRegForm} />\r\n   )\r\n   \r\n\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <div className=\"loginPage row m-0\">\r\n            {showForm(props)}\r\n         </div>\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport './css/style.css';\r\n\r\n\r\nfunction Navbar(props) {\r\n\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <div className=\"navWrap d-flex w-100\">\r\n            <ul>\r\n               <li>\r\n                  Home\r\n               </li>\r\n               <li>\r\n                  Equipments\r\n               </li>\r\n               <li>\r\n                  My Activity\r\n               </li>\r\n            </ul>\r\n            <p className=\"logoutNavBtn secondFont\" onClick={props.logoutHandler}>\r\n               logout\r\n            </p>\r\n\r\n         </div>\r\n      </React.Fragment>\r\n   )\r\n   \r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './css/style.css';\r\n\r\nfunction ComingSoon() {\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <div className=\"comingSoonBox\">\r\n            <p className=\"firstText firstFont\">\r\n               COMING\r\n            </p>\r\n            <p className=\"secondText secondFont\">\r\n               SOON\r\n            </p>\r\n         </div>\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\nexport default ComingSoon;","import React from \"react\";\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport Navbar from '../../components/NavBar/Index';\r\nimport WelcomeBox from '../../components/members/WelcomeMsg/Index';\r\nimport ComingSoonBox from '../../components/Temp/Index';\r\nimport './css/style.css';\r\n\r\n\r\nfunction MainPage(props) {\r\n\r\n   \r\n\r\n   return (\r\n      <React.Fragment>\r\n         {\r\n            !props.isLoggedIn ? \r\n            <Redirect to=\"/\" />\r\n            :\r\n            <div className=\"mainPageWrap\">\r\n               <Navbar logoutHandler={props.logoutHandler} />\r\n               <Route path=\"/\">\r\n                  <ComingSoonBox />\r\n               </Route>\r\n            </div>\r\n         }\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\nexport default MainPage;","import React, { useState } from 'react';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport LoginPage from './pages/Login/Index';\nimport MainPage from './pages/Main/Index';\n\n\n\nfunction App() {\n\n  let [isLoggedIn, setIsLoggedIn] = useState(localStorage.getItem(\"currentUser\") ? true : false);\n\n  let logoutHandler = () => {\n    localStorage.clear();\n    setIsLoggedIn(false);\n  }\n\n  let loginHandler = (e) => {\n    setIsLoggedIn(e)\n  }\n\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Route exact path=\"/\">\n            {\n              isLoggedIn ? <Redirect to=\"/user\" /> \n              : \n              (props) => <LoginPage {...props} loginHandler={loginHandler} />\n            }\n          </Route>\n          <Route path=\"/user\">\n            {\n              isLoggedIn ?\n                (props) =>\n                <MainPage\n                  {...props}\n                  logoutHandler={logoutHandler}\n                  isLoggedIn={isLoggedIn}\n                />\n              :\n                <Redirect to =\"/\" />\n            }\n          </Route>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}